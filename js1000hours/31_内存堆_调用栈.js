// //内存堆，内存分配的地方
// //调用栈，代码执行的地方
// //都属于V8引擎
// //JS是一门单线程语言，只有一个调用栈，同一时间只能做一件事情。

// //执行上下文
// // (1),当浏览器执行时，创立全局执行上下文,并压如到调用栈中。
// // （2），当遇到第一个函数时候，压入栈顶
// // （3），第一个函数执行完毕时，弹出，直到代码执行完毕

// 创建执行上下文
// 1，this值
// 2，创建词法环境组件
// 3，创建变量环境组价

// 在全局执行上下文中，this指的是全局对象
// 在函数执行上下文中，如果被引用对象调用，this会设置成这个对象，否则this的值被设置成全局对象


// 词法环境
// 词法环境是一种规范类型，基于 ECMAScript 代码的词法嵌套结构来定义标识符和具体变量和函数的关联。一个词法环境由环境记录器和一个可能的引用外部词法环境的空值组成。
// 词法环境是一种持有标识符-变量映射的结构
// 1：环境记录器，存储变量或者函数申明的具体位置
// 2：外部环境的引用，访问其父级词法环境（作用域）。

// 词法环境，
// 全局环境：对象环境记录器，用来定义出现在全局上下文中的变量和函数的关系。全局环境的外部环境引用是 null。它拥有内建的 Object/Array/等、在环境记录器内的原型函数（关联全局对象，比如 window 对象）还有任何用户定义的全局变量，并且 this的值指向全局对象
// 函数环境：声明式环境记录器，存储变量、函数和参数，函数内部用户定义的变量存储在环境记录器中。并且引用的外部环境可能是全局环境，或者任何包含此内部函数的外部函数。
//         注意 ！ 对于函数环境，声明式环境记录器还包含了一个传递给函数的 arguments 对象（此对象存储索引和参数的映射）和传递给函数的参数的 length。


// 变量环境
// 也是一个词法环境，环境记录器持有变量声明语句在执行上下文中创建的绑定关系








